{"componentChunkName":"component---src-templates-blog-post-js","path":"/13/","result":{"data":{"site":{"siteMetadata":{"title":"アーカイブ"}},"markdownRemark":{"id":"5d9842ba-7e7b-5f85-89f5-625a9cf957c8","excerpt":"はじめに 初投稿です。 Reactで「MarkLive PDF」というMarkdownエディタを作りました。作成・編集したMarkdownファイルをPDF化することができます。 https://chonai-flora.github.io/marklive-pdf/ 動機 部の議録やゼミ資料をWord…","html":"<h1>はじめに</h1>\n<p>初投稿です。<br>\nReactで「<a href=\"https://chonai-flora.github.io/marklive-pdf/\">MarkLive PDF</a>」というMarkdownエディタを作りました。作成・編集したMarkdownファイルをPDF化することができます。</p>\n<p><a href=\"https://chonai-flora.github.io/marklive-pdf/\">https://chonai-flora.github.io/marklive-pdf/</a></p>\n<h1>動機</h1>\n<p>部の議録やゼミ資料をWordでつくるのが面倒なので、MarkdownをサクッとPDF化できたらいいなと思い実装しました。実装はかなり緩いのでバグ等あるかもしれません...。</p>\n<h1>使い方</h1>\n<p>エディタにそのままMarkdownファイルを書き込んでください。エディタ部はuiwの <a href=\"https://uiwjs.github.io/react-md-editor/\"><code class=\"language-text\">react-md-editor</code></a> をほとんどそのままお借りしています。</p>\n<p>左下の「Markdown形式で保存」ボタンで編集中のmdファイルがダウンロードされます。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1889756/267161a9-635b-33d9-f302-6b9d387c0629.png\" alt=\"image.png\"></p>\n<p>隣の「PDF形式にエクスポート」ボタンを押すと印刷画面が表示されるので、スタイルを確認して保存します。<code class=\"language-text\">&lt;br></code> タグでページ分割が可能です。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1889756/c4add019-a339-9583-abe1-7772f4d9dc7a.png\" alt=\"image.png\"></p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1889756/5ae9fba8-bf5a-18de-f3cb-c248f2c072ab.png\" alt=\"image.png\"></p>\n<p>もちろん画像埋め込みやハイパーリンク、LaTexにも対応しています。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1889756/e540a355-b78c-aeb1-1ec5-aa6c3233aac0.png\" alt=\"image.png\"></p>\n<h1>実装</h1>\n<p>PDFへの変換は「PDF Preview」に表示している内容にrefオブジェクトを渡し、 <a href=\"https://www.npmjs.com/package/react-to-print\"><code class=\"language-text\">react-to-print</code></a> で保存しています。DOMを印刷することができるライブラリです。</p>\n<div class=\"gatsby-highlight\" data-language=\"pdfpreview.tsx\"><pre class=\"language-pdfpreview.tsx\"><code class=\"language-pdfpreview.tsx\">import &#39;katex/dist/katex.css&#39;;\nimport remarkMath from &#39;remark-math&#39;;\nimport rehypeKatex from &#39;rehype-katex&#39;;\nimport MDEditor from &#39;@uiw/react-md-editor&#39;;\n\nconst PdfPreview = (props: { source: string }) =&gt; {\n    return (\n        &lt;div id=&#39;pdf&#39; data-color-mode=&#39;light&#39; style={{ marginBottom: &#39;80px&#39; }}&gt;\n            &lt;MDEditor.Markdown\n                style={{ margin: &#39;30px&#39;, pageBreakAfter: &#39;always&#39; }}\n                disableCopy={true}\n                remarkPlugins={[remarkMath]}\n                rehypePlugins={[rehypeKatex]}\n                source={props.source || ``}\n            /&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default PdfPreview;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"editor.tsx\"><pre class=\"language-editor.tsx\"><code class=\"language-editor.tsx\">import React, { useRef, useState, useEffect } from &#39;react&#39;;\nimport MDEditor, { MDEditorProps } from &#39;@uiw/react-md-editor&#39;;\n\nimport PdfPreview from &#39;./PdfPreview&#39;;\n\nconst Editor = () =&gt; {\n    /* 省略 */\n    \n    // PDF用のrefオブジェクト\n    const pdfRef = useRef(null);\n    \n    const [mdTitle, setTitle] = useState&lt;string&gt;(``);\n    const [state, setVisible] = useState&lt;MDEditorProps&gt;({\n        visibleDragbar: true,\n        hideToolbar: true,\n        highlightEnable: true,\n        enableScroll: true,\n        value: ``,\n        preview: &#39;live&#39;,\n    });\n\n    return (\n        &lt;div data-color-mode=&#39;light&#39;&gt;\n            /* 省略 */\n            \n            &lt;h3&gt;PDF Preview&lt;/h3&gt;\n            &lt;div ref={pdfRef}&gt;\n                // PdfPreview に編集中のmdデータを渡す\n                {state.value &amp;&amp; (\n                    state.value!.split(&#39;&lt;br&gt;&#39;).map((section) =&gt; &lt;PdfPreview source={section} /&gt;)\n                )}\n            &lt;/div&gt;\n           \n            /* 省略 */\n        &lt;/div&gt;\n    );\n}</code></pre></div>\n<p><code class=\"language-text\">PdfPreview</code> のstyleに <code class=\"language-text\">pageBreakAfter: 'always'</code> を指定することで、ページ分割を実現しています。</p>\n<p>あとはボタンを配置して <code class=\"language-text\">ReactToPrint</code> の <code class=\"language-text\">content</code> に先ほどのrefオブジェクトを渡します。スタイルが適用されるのもありがたいです。</p>\n<div class=\"gatsby-highlight\" data-language=\"editor.tsx\"><pre class=\"language-editor.tsx\"><code class=\"language-editor.tsx\">import ReactToPrint from &#39;react-to-print&#39;;\n\n/* 省略 */\n\nconst Editor = () =&gt; {\n    return (\n        &lt;div data-color-mode=&#39;light&#39;&gt;\n            /* 省略 */\n    \n            &lt;div&gt;\n                &lt;ReactToPrint\n                    trigger={() =&gt; (\n                        &lt;button\n                            type=&#39;button&#39;\n                            disabled={!state.value}\n                            style={{ marginLeft: 10 }}\n                        &gt;\n                            PDF形式にエクスポート\n                        &lt;/button&gt;\n                    )}\n                    content={() =&gt; pdfRef.current}\n                    documentTitle={`${mdTitle || &quot;untitled&quot;}.pdf`}\n                /&gt;\n            &lt;/div&gt;\n            \n            /* 省略 */\n        &lt;/div&gt;\n    );\n}</code></pre></div>\n<h1>改善点</h1>\n<ul>\n<li><code class=\"language-text\">redux-persist</code> でstoreの状態(編集中のテキスト)を永続化しても良いかも</li>\n<li>ドラッグ&#x26;ドロップでファイルを読み込めるようにしても良いかも</li>\n</ul>\n<h1>おわりに</h1>\n<p>今のところ想定通り動いてくれているので、資料作成が捗っています。部員に使用感等聞いて適宜修正していけたらと思います。</p>\n<p>リポジトリ: <a href=\"https://github.com/chonai-flora/marklive-pdf/\">https://github.com/chonai-flora/marklive-pdf/</a><br>\n参考: <a href=\"https://github.com/uiwjs/react-md-editor/\">https://github.com/uiwjs/react-md-editor/</a></p>\n<h1>追記: ドラッグアンドドロップに対応</h1>\n<p>テキストエリアへのドラッグアンドドロップ機能を追加しました。テキストエリアにMarkdownファイルをドラッグアンドドロップして編集することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"editor.tsx\"><pre class=\"language-editor.tsx\"><code class=\"language-editor.tsx\">import { useDropzone } from &#39;react-dropzone&#39;;\n\nimport PdfPreview from &#39;./PdfPreview&#39;;\n\nconst Editor = () =&gt; {\n    /* 省略 */\n    \n    const onDrop = useCallback(async (acceptedFiles: File[]) =&gt; {\n        const acceptedFile = acceptedFiles.slice(-1)[0];\n        const filename = acceptedFile.name || ``;\n        const extension = filename.split(&#39;.&#39;).pop()?.toLowerCase();\n        if (extension !== undefined &amp;&amp; extension !== &#39;md&#39;) {\n            setTitle(&quot;file type is not supported&quot;);\n            setVisible({\n                ...state,\n                value: &quot;このファイルのプレビューを表示できません。拡張子が`md`のファイルのみ対応しています。&quot;\n            });\n        }\n        else {\n            const text = await acceptedFile.text();\n            setTitle(filename.split(&#39;.&#39;)[0]);\n            setVisible({\n                ...state,\n                value: text\n            });\n        }\n    }, []);\n    const { getRootProps, getInputProps } = useDropzone({ onDrop, noClick: true });\n\n    return (\n        &lt;div data-color-mode=&#39;light&#39;&gt;\n            /* 省略 */\n            \n            &lt;div {...getRootProps()}&gt;\n                &lt;input {...getInputProps()} /&gt;\n                &lt;MDEditor\n                    autoFocus\n                    value={state.value}\n                    previewOptions={{\n                        linkTarget: &#39;_blank&#39;,\n                        remarkPlugins: [remarkMath],\n                        rehypePlugins: [rehypeKatex]\n                    }}\n                    height={400}\n                    highlightEnable={state.highlightEnable}\n                    hideToolbar={!state.hideToolbar}\n                    enableScroll={state.enableScroll}\n                    visibleDragbar={state.visibleDragbar}\n                    textareaProps={{\n                        placeholder: &quot;記事やレポートをMarkdown形式で記述してください&quot;,\n                    }}\n                    preview={state.preview}\n                    onChange={(newValue = &#39;&#39;) =&gt; {\n                        setVisible({ ...state, value: newValue });\n                    }}\n                /&gt;\n            &lt;/div&gt;\n           \n            /* 省略 */\n        &lt;/div&gt;\n    );\n}</code></pre></div>","frontmatter":{"title":"","date":null,"category":null,"isPublic":null},"fields":{"slug":"/13/"}},"previous":{"fields":{"slug":"/12/"},"frontmatter":{"title":"クリスマス抽選ソフトのつくり方"}},"next":null},"pageContext":{"id":"5d9842ba-7e7b-5f85-89f5-625a9cf957c8","previousPostId":"89a7bc9e-0011-56e8-ae29-3790145397e9","nextPostId":null}},"staticQueryHashes":["1324386404"],"slicesMap":{}}